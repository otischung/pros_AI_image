# This YAML file is refered to
# https://youtu.be/RgZyX-e6W9E?si=iISxsuXEZKma4SVv
# https://youtu.be/Tx1UElRhELg?si=MrbyhgWCwlGVtgyD

name: Docker Image CI for GitHub Container Registry (GHCR)

on:
  push:
    # branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ '*.*.*' ]
  # pull_request:
  #   branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  # Here we use GitHub Container Registry (GHCR) to store our images
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  # IMAGE_NAME: ${{ github.repository }}  # This will have problem with uppercase
  IMAGE_NAME: otischung/pros_ai_image
  # IMAGE_TAG: 1.0.${{ github.run_number }}


jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write
    #   # This is used to complete the identity challenge
    #   # with sigstore/fulcio when running outside of PRs.
    #   id-token: write

    steps:
      # We need to free some space to build this large image.
      # https://stackoverflow.com/questions/75536771/github-runner-out-of-disk-space-after-building-docker-image
      - name: Check initial disk space
        run: df . -h

      - name: Free disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt install cmake -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          echo "some packages purged"

      # - name: Check disk space after removing unnecessary packages
      #   run: |
      #     sudo dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -nr | head
      #     df . -h
      #     sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head

      # This is going to pull our code from the repository
      # into the actions runner in order to build the image
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Install the cosign tool except on PR
      # # https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
      #   with:
      #     cosign-release: 'v2.1.1'
      
      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # # Use command line
        # docker buildx create --use --platform=linux/arm64,linux/amd64 --name multi-platform-builder
        # docker buildx inspect --bootstrap

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        # Choose one method
        # 1. Use login-action
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  # You can use the default GitHub token
          # password: ${{ secrets.DOCKER_PAT }}  # Or you can use your pre-generated Personal Access Token
        # 2. Use command line
        # run: |
        #   docker login --username ${{ github.actor }} --password ${{ secrets.DOCKER_PAT }} ${{ env.REGISTRY }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        # Choose one method
        # 1. Use build-push-action
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}  # You can use the metadata generated by the previous step
          # tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}  # You can also define your own tag
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # TODO: Improve pipeline with https://docs.docker.com/build/ci/github-actions/multi-platform/
          platforms: linux/arm64,linux/amd64  # ,linux/arm/v7
        # 2. Use command lines
        # run: docker buildx build --platform linux/amd64,linux/arm64 -t ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} -f ./Dockerfile.ros2 --push .


      # # Sign the resulting Docker image digest except on PRs.
      # # This will only write to the public Rekor transparency log when the Docker
      # # repository is public to avoid leaking data.  If you would like to publish
      # # transparency data even for private images, pass --force to cosign below.
      # # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: env.SIGN && ${{ github.event_name != 'pull_request' }}
      #   env:
      #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #     # TAGS: ${{ steps.meta.outputs.tags }}
      #     # DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #     COSIGN_EXPERIMENTAL: "true"
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   # run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      #   run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
